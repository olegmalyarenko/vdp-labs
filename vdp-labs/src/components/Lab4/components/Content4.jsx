import task from "../static/task4.png";
import schema from "../static/schema4.png";
import result from "../static/results4.png";

const Content4 = () => (
    <div className="content" >
       <div className="content" id="meta4">
            <h3>Лабораторна робота №4</h3>
            <h4>Тема: Цикли з розгалуженням</h4>
            <ul><h4>Мета роботи:</h4>
                <li>Вивчити особливості циклічних обчислювальних процесів з розгалуженнями</li>
                <li>Опанувати технологію рекурентних обчислень</li>
                <li>Навчитися розробляти алгоритми та програми розвинення функцій у ряди</li>
            </ul>
        </div>

        <div className="content" id="task4">
            <h4>Варіант №17</h4>
            <h4>Умова завдання</h4>
            <p>Обчислити значення функції у, розвинувши функцію tg(x) у ряд Тейлора.<br/> Аргумент х змінюється від -3 до 3 з кроком 0.5. Визначити похибку.</p>
            <img src={task} alt="task"/>
        </div>

        <div className="content" id="schema4">
            <h4>Блок-схема алгоритму програми</h4>
            <img src={schema} alt="schema" width={500}/>
        </div>

        <div className="content" id="code4">
                <h4>Текст програми</h4>
                <div className="example"> 
                {`#include <iostream>`}<br/>
                {`#include <math.h> `}<br/>
                {`using namespace std;`}<br/>

                {`double Tg(float x)`}<br/>
                {`{`}<br/>
                {`float sum = x - 1; //сума членів ряду`}<br/>
                {`int i = 1; // знаменник елемента ряду`}<br/>
                {`float t = 0.001; //точність обчислення`}<br/>
                {`float member = x - 1; //поточний елемент ряду`}<br/>
                {`while (member > t)`}<br/>
                {`{`}<br/>
                {`member = member * (x - 1); //поточний елемент за формулою Тейлора`}<br/>
                {`sum += member / i; // сума`}<br/>
                {`i++;`}<br/>
                {`}`}<br/>
                {`return sum;`}<br/>
                {`}`}<br/>
                {`int main()`}<br/>
                {`{`}<br/>
                {`float y, // Вираз за формулою Тейлора`}<br/>
                {`st, // значення стандартної функції tg`}<br/>
                {`x, // аргумент функції`}<br/>
                {`err; // похибка`}<br/>
                {`cout << "--------------------------------------------------" << endl;`}<br/>
                {`printf("     x             y          standart        error \n");`}<br/>
                {`cout << "--------------------------------------------------" << endl;`}<br/>

                {`for (x = -3; x <= 3; x += 0.5) // цикл перебору значень аргументу функції`}<br/>
                {`{`}<br/>
                {`int flag = 0;`}<br/>
                {`if (-2 <= x && x < 0) //перевірка умов вибору розрахункової функції`}<br/>
                {`{`}<br/>
                {` y = (Tg(x) - (x / 2)) / Tg(2 * x); // Визначення функції за формулою Тейлора`}<br/>
                {`st = (tan(x) - (x / 2)) / tan(2 * x); //Визначення функції за стандартною формулою`}<br/>
                {`err = st - y; //Розбіжність між точним і наближеним значеннями функції`}<br/>
                {` }`}<br/>
                {`else if (0 < x && x <= 2)`}<br/>
                {`{`}<br/>
                {` y = Tg(x + 2) - pow(Tg(x), 2);`}<br/>
                {`st = tan(x + 2) - pow(tan(x), 2);`}<br/>
                {` err = st - y;`}<br/>
                {` }`}<br/>
                {`else if (x < 0)`}<br/>
                {` flag = 1;`}<br/>
                {`if (flag == 0)`}<br/>
                {`printf("  %f     %f     %f      %f \n", x, y, st, err);`}<br/>
                {`else`}<br/>
                {`printf("  %f     not define    \n", x);`}<br/>
                {`}`}<br/>
                {`return 0;`}<br/>
                {`}`}<br/>
                {``}<br/>
                </div>
        </div> 

        <div className="content" id="result4">
            <h4>Результати виконання програми</h4>
            <img src={result} alt="result" width={500} height={250}/><br/><br/>
        </div>

        <div className="content" id="summary4">
            <h4>Висновки</h4>
            <ul>Виконавши дану лабораторну роботу ми :
                <li>Вивчили особливості циклічних обчислювальних процесів з розгалуженнями</li>
                <li>Познайомилися з рекурентними співвідношеннями та розвиненням функцій у ряди Тейлора</li>
            </ul>
        </div> 

        <div className="content" id="answers4">
        <h4>Відповіді на контрольні питання</h4>
        <h5>Що таке ітераційний цикл?</h5>
        <p>Ітераційним циклом називається цикл, число повторень дій у якому невідомо і не може бути обчислено до виконання циклу.</p>
        <h5>Які причини зациклювання програм?</h5>
        <p>Зациклювання програми відбувається у разі, коли машина здійснює обчислення по деякому замкнутому циклу, не зупиняючись.</p>
        <h5>За яких умов цикл не виконується?</h5>
        <p>Якщо умова в циклі одразу при першій перевірці приймає значення False, то тіло циклу не виконається жодного разу.</p>
        <h5>У чому полягають особливості застосування операторів break та continue?</h5>
        <p>У мові C++ існують оператори break та continue, які використовуються для управління ходом виконання циклічного процесу. <br/>
        Ці оператори можуть бути застосовані тільки в тілі циклу. Оператор break призначений для штучного переривання виконання.</p>
        </div>     
        <p>Оператор continue призначений для переходу до виконання наступної ітерації циклу. Якщо в тілі циклу зустрічається оператор continue, то:
        <br/>	виконання поточної ітерації зупиняється i відбувається перехід до наступної ітерації циклу</p>     
         <h5>Яке призначення функцій С++? Яка роль функції main()?</h5>
         <p>Після ініціалізації стандартної бібліотеки з функції main() починається виконання. Якщо цієї функції немає, то й починати виконання програми немає звідки.</p>
         <h5>Що таке прототип функції? Що таке визначення функції?</h5>
         <p>Прототип функції — декларація функції в деяких мовах програмування, при якій вказується тільки її назва,<br/> тип та кількість і типи її аргументів. Таке оголошення необхідне і достатнє для компілятора при створенні правильного об'єктного коду.</p>
         <ul>Функція – це частина програми, яка має такі властивості чи ознаки:
             <li>є логічно самостійною частиною програми;,</li>
             <li>має ім’я, на основі якого здійснюється виклик функції (виконання функції). Ім’я функції підпорядковується правилам задавання імен ідентифікаторів мови C++;</li>
             <li>може містити список параметрів, які передаються їй для обробки або використання. Якщо функція не містить списку параметрів, то така функція називається функцією без параметрів;</li>
            <li>може повертати (не обов’язково) деяке значення. У випадку, якщо функція не повертає ніякого значення, тоді вказується ключове слово void;</li>
            <li>має власний програмний код, який береться у фігурні дужки "{ }" і вирішує задачу, яка поставлена на цю функцію. Програмний код функції, реалізований в фігурних дужках, називається “тіло функції”.</li>
         </ul>
         <h5>Дати поняття рекурсивних функцій. Технологія припинення рекурсивного виклику.</h5>
         <p>Рекурсивні функції – це функції, що викликають самі себе.</p>
         <h5>Чим пряма рекурсія відрізняється від непрямої?</h5>
         <p>Рекурсія може бути як прямою, коли програма викликає саму себе, так і непрямою (непрямою), коли програма викликає іншу програму, а та в свою чергу, викликає першу програму.</p>
         <h5>Якими бувають оператори виклику функцій?</h5>
         <p>Оператор виклику функції може бути перевантажений. У цьому випадку у класі створюється операторна функція operator()(). Ця функція може приймати довільну кількість параметрів.</p>
         <h5>Як викликається функція, що повертає значення void?</h5>
         <p>Ця функція має тип повернення void, який означає, що функція не повертає значення. Оскільки значення не повертається, і оператор return не потрібно.</p>
         <h5>Значення якого типу повертає функція, якщо тип не вказано?</h5>
         <p>Для випадків, коли функція не повертає ніякого значення використовуються різні механізми, наприклад: повертається тип void.</p>
         <h5>Скільки значень може повернути функція?</h5>
         <p>Функція може повернути тільки одне значення.</p>
    </div>
);

export default Content4;
